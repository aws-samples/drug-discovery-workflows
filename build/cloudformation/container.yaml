# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  container.yaml: Creates AWS CodeBuild resources for container building.
Parameters:
  ApplicationName:
    Description: Name of the application, if applicable
    Type: String
    Default: Amazon HealthOmics Drug Discovery Workflows
  Environment:
    Description: Leave this as "main" unless you are testing a pre-release versions of this architecture.
    Type: String
    Default: main
    AllowedValues:
      - main
      - dev    
  S3BucketName:
    Description: Name of the S3 bucket to use for deployment and run storage
    Type: String
  Timestamp:
    Description: Timestamp for the cfn deployment
    Type: Number
    Default: 9999999999
  StackPrefix:
    Description: Stack-specific prefix for resource naming
    Type: String
    Default: abc-123
  WaitForCodeBuild:
    Description: Should CloudFormation wait for CodeBuild?
    Type: String
    Default: "N"
    AllowedValues: [Y, N]

Conditions:
  WaitForCodeBuildCondition:
    "Fn::Equals": [Ref: "WaitForCodeBuild", "Y"]     

Resources:
  EncryptionKey:
    Type: "AWS::KMS::Key"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub "${ApplicationName}-container-build-key"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
              ]
            Resource: "*"
          - Sid: Enable CodeBuild Encryption
            Effect: Allow
            Principal:
              AWS: !GetAtt CodeBuildContainerRole.Arn
            Action:
              [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ]
            Resource: "*"
          - Sid: Enable CloudWatch Logs Encryption
            Effect: Allow
            Principal:
              Service: "logs.amazonaws.com"
            Action:
              [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey",
              ]
            Resource: "*"
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackPrefix
          Value: !Ref StackPrefix

  CodeBuildContainerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StackPrefix}-CodeBuildContainerRole"
      Description: "Required service policies to support building containers"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: CodeBuildContainerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${StackPrefix}-CodeBuildContainer*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${S3BucketName}"
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${StackPrefix}-CodeBuildContainerProject"
              - Effect: Allow
                Action:
                  - ecr:CreateRepository
                  - ecr:TagResource
                  - ecr:SetRepositoryPolicy
                Resource:
                  - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackPrefix
          Value: !Ref StackPrefix

  CodeBuildContainerProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${StackPrefix}-CodeBuildContainerProject"
      Artifacts:
        Type: NO_ARTIFACTS
      Description: Build Docker container
      EncryptionKey: !Ref EncryptionKey
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        EnvironmentVariables:
          - Name: ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
          - Name: REGION
            Value: !Ref "AWS::Region"
          - Name: STACK_PREFIX
            Value: !Ref StackPrefix
          - Name: WAIT_CONDITION_HANDLE
            Value: !Ref CodeBuildWaitHandle
        Image: aws/codebuild/standard:7.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ResourceAccessRole: !GetAtt CodeBuildContainerRole.Arn
      ServiceRole: !GetAtt CodeBuildContainerRole.Arn
      Source:
        BuildSpec: build/buildspec/buildspec_container.yaml
        Location: !Sub "${S3BucketName}/build/${Environment}/code/code.zip"
        Type: S3
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackPrefix
          Value: !Ref StackPrefix

  CodeBuildContainerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StackPrefix}-CodeBuildContainerLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: StartCodeBuildContainerLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt CodeBuildContainerProject.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${S3BucketName}/*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  StartCodeBuildContainerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${StackPrefix}-StartCodeBuildContainerLambda"
      ReservedConcurrentExecutions: 10
      Code: "../lambda/StartCodeBuildLambda"
      Description: Start CodeBuildContainerProject
      Handler: index.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt: CodeBuildContainerLambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 30
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackPrefix
          Value: !Ref StackPrefix

  StartCodeBuildContainer:
    Type: Custom::ResourceForBuildingContainer
    Properties:
      ServiceToken:
        Fn::GetAtt: StartCodeBuildContainerLambda.Arn
      SourceS3URI: !Sub "${S3BucketName}/build/${Environment}/code/code.zip"
      SourceSubfolder: "assets/containers"
      ProjectName:
        Ref: CodeBuildContainerProject
      Timestamp:
        Ref: Timestamp

  CodeBuildWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  CodeBuildWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Condition: WaitForCodeBuildCondition    
    Properties:
      Handle: !Ref CodeBuildWaitHandle
      Timeout: 3600
      Count: !GetAtt StartCodeBuildContainer.ArtifactCount

  DeleteContainerRepoLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StackPrefix}-DeleteContainerRepoLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DeleteContainerRepoLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:DescribeRepositories
                  - ecr:DeleteRepository
                  - ecr:ListTagsForResource
                Resource:
                  - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  DeleteContainerRepoLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${StackPrefix}-DeleteContainerRepoLambda"
      ReservedConcurrentExecutions: 10
      Code: "../lambda/DeleteContainerRepoLambda"
      Description: Delete ECR repositories
      Handler: index.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt: DeleteContainerRepoLambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 30
      Tags:
        - Key: Application
          Value: !Ref ApplicationName
        - Key: StackPrefix
          Value: !Ref StackPrefix

  DeleteContainerRepositories:
    Type: Custom::ResourceForDeletingContainerRepo
    Properties:
      ServiceToken:
        Fn::GetAtt: DeleteContainerRepoLambda.Arn
      StackPrefix:
        Ref: StackPrefix
