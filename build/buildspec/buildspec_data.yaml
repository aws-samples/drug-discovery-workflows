# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

version: 0.2

env:
  shell: bash

phases:
  pre_build:
    commands:
      - echo Build started on `date` for $NAME
      - echo "Build context is $BUILD_CONTEXT"
      - echo "Loading secrets from AWS Secrets Manager"
      - echo $SECRET_NAME
      - aws secretsmanager get-secret-value --secret-id $SECRET_NAME --query SecretString --output text > 'secrets.json' 2>/dev/null || true
      - SECRET_VALUES=$(jq --compact-output --raw-output 'to_entries | map("\(.key)=\(.value)") | .[]' secrets.json)
      - for SECRET in $SECRET_VALUES; do export $SECRET; done
      - rm secrets.json && unset SECRET_VALUES
      - echo "Processing $BUILD_CONTEXT"
      - echo "Replacing REGION placeholders"
      - sed -i='' "s/{{REGION}}/$REGION/g" $BUILD_CONTEXT 2>/dev/null || true
      - if [[ "$DESTINATION_URI" =~ ^s3?://([^/]+) ]]; then BUCKET_NAME=${BASH_REMATCH[1]}; else echo "Invalid S3 URI"; fi
      - echo Installing Mountpoint for Amazon S3
      - wget https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.deb
      - sudo apt-get update && sudo apt-get install -y ./mount-s3.deb git-lfs zip tar
      - git lfs install
      - mkdir $HOME/s3
      - echo Mounting $DESTINATION_URI
      - mount-s3 $BUCKET_NAME $HOME/s3 --allow-delete --allow-overwrite --write-part-size=419257600
      - echo "Installing NVIDIA NGC CLI"
      - wget -q --content-disposition https://api.ngc.nvidia.com/v2/resources/nvidia/ngc-apps/ngc_cli/versions/3.53.0/files/ngccli_linux.zip -O ngccli_linux.zip && unzip -q ngccli_linux.zip
      - chmod u+x ngc-cli/ngc
      - echo "export PATH=\"\$PATH:$(pwd)/ngc-cli\"" >> ~/.bash_profile && source ~/.bash_profile
  build:
    commands:
      - FILENAME="${NAME%.*}"
      - |
        if [[ "$DESTINATION_URI" =~ ^s3?://[^/]+/(.*)/* ]]; then
          KEY="${BASH_REMATCH[1]}/$FILENAME"
          echo "Destination Key: $KEY"
        else
          KEY="ref-data/$FILENAME"
          echo "Destination Key: $KEY"
        fi
      - |
        while read -r SOURCE_URI; do
          echo $SOURCE_URI;
          if [[ "$SOURCE_URI" =~ ^([^:]+) ]]; then
            SOURCE_SCHEME=${BASH_REMATCH[1]}
            echo "Source scheme: $SOURCE_SCHEME"
          else
            echo "Invalid source URI"
          fi;
          if [[ "$SOURCE_SCHEME" == "s3" ]]; then
            if [[ "$SOURCE_URI" =~ .*\/$ ]]; then
              echo "Recursive file sync from $SOURCE_URI"
              aws s3 sync $SOURCE_URI $DESTINATION_URI/$FILENAME/
            else
              echo "Single file download from $SOURCE_URI"
              aws s3 cp $SOURCE_URI $DESTINATION_URI/$FILENAME/
            fi
          elif [[ "$SOURCE_URI" =~ ^nvidia/[^/]+ ]]; then
            echo "Downloading ${SOURCE_URI} from NVIDIA NGC"
            mkdir -p $HOME/s3/$KEY/$SOURCE_URI
            ngc registry model download-version $SOURCE_URI --dest $HOME/s3/$KEY
          elif [[ "$SOURCE_URI" =~ ^nim/[^/]+ ]]; then
            echo "Downloading ${SOURCE_URI} from NVIDIA NGC"
            mkdir -p $HOME/s3/$KEY/$SOURCE_URI
            ngc registry model download-version $SOURCE_URI --dest $HOME/s3/$KEY
          elif [[ "$SOURCE_URI" =~ ^https://api.ngc.nvidia.com/(.+) ]]; then
            echo "Downloading ${SOURCE_URI} from NVIDIA API"
            NGC_PATH=${BASH_REMATCH[1]}
            mkdir -p $HOME/s3/$KEY/$NGC_PATH
            TOKEN=$(curl -s -u "\$oauthtoken":"$NGC_CLI_API_KEY" -H 'Accept:application/json' "https://authn.nvidia.com/token?service=ngc&scope=group/ngc:${NGC_CLI_ORG}&group/ngc:${NGC_CLI_ORG}/" | jq -r '.token')
            wget --header="Authorization: Bearer $TOKEN" \
            --header="Content-Type: application/json" \
            $SOURCE_URI -O ngc.zip
            unzip -nD ngc.zip -d $HOME/s3/$KEY/$NGC_PATH
            rm ngc.zip
          elif [[ "$SOURCE_URI" =~ ^[^/]+/[^/]+ ]]; then
            echo "Downloading ${SOURCE_URI} from Hugging Face Hub"
            mkdir tmp
            git clone https://huggingface.co/$SOURCE_URI tmp --depth=1
            rm -rf tmp/.git
            mkdir -p $HOME/s3/$KEY/$SOURCE_URI
            mv -n tmp/* $HOME/s3/$KEY/$SOURCE_URI
            rm -rf tmp
          else
            echo "Downloading ${SOURCE_URI}"
            wget -nc $SOURCE_URI -P $HOME/s3/$KEY --no-verbose --show-progress --progress=dot:giga
            if [[ "$SOURCE_URI" =~ .*\.tar.gz$ ]]; then
              echo "Extracting file"
              tar -xzf $HOME/s3/$KEY/*.tar.gz -C $HOME/s3/$KEY --skip-old-files --warning=existing-file
            elif [[ "$SOURCE_URI" =~ .*\.tar$ ]]; then
              echo "Extracting file"
              tar -xf $HOME/s3/$KEY/*.tar -C $HOME/s3/$KEY --skip-old-files --warning=existing-file
            elif [[ "$SOURCE_URI" =~ .*\.gz$ ]]; then
              echo "Extracting file"
              gunzip -k $HOME/s3/$KEY/*.gz
            fi;
          fi;          
        done <$BUILD_CONTEXT

  post_build:
    commands:
      - sudo umount $HOME/s3
      - JSON_DATA=$( jq -n --arg uid "$NAME" '{Status:"SUCCESS", Reason:"Configuration Complete","UniqueId":$uid, "Data":"Application has completed configuration."}' )
      - curl -X PUT -H "Content-Type:" --data-binary "$JSON_DATA" "$WAIT_CONDITION_HANDLE"
      - echo Download completed on `date`
